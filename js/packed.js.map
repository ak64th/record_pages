{"version":3,"sources":["constants.js","main.js","modal_view.js","models.js","pre_quiz_views.js","question_views.js","quiz_views.js","rank_view.js"],"names":["root","app","QUESTION_TYPE","MULTI","SINGLE","QUIZ_TYPE","ORDINARY","TIME_LIMIT","CHALLENGE","DOWNLOAD_TIMEOUT","DOWNLOAD_TRIGGER","window","$","_","Backbone","ApplicationView","View","extend","el","dataRoot","apiRoot","initialize","options","this","game_code","gameDataRoot","quizConfig","config","run","errorView","used","parseInt","localStorage","getItem","max","max_chances","RejectionNoMoreChanceView","now","Date","start_at","end_at","RejectionTooEarlyView","RejectionTooLateView","loadView","prepareQuiz","view","close","remove","$el","append","render","loadStyle","style","quizType","Error","console","log","WelcomeView","content","welcome","infoFields","info_fields","quizId","id","listenToOnce","startQuiz","args","ViewClass","OrdinaryQuizView","TimeLimitQuizView","ChallengeQuizView","setItem","finishQuiz","RankView","ModalView","tagName","className","template","html","events","click .submit","callback","isFunction","modal","Option","Model","Question","defaults","selected","timeout","answered","isCorrect","get","answer","pluck","length","difference","getAnswerCodes","map","OptionCollection","Collection","model","QuestionCollection","totalPoints","questionPoints","each","RejectionView","onSubmit","e","field_keys","unzip","validated","field_data","chain","filter","input","indexOf","name","every","value","push","trigger","message","emotion","button","text","QuestionView","optionData","questionOptions","index","set","String","fromCharCode","listenTo","toggleChecked","on","onTimeout","optionViews","data","toJSON","renderAllOptions","renderOption","MultiSelectionView","SingleSelectionView","shuffle","models","checked","isEmpty","finish","OptionView","change input","toggle","QuizBaseView","questions","timeLimit","start","updatePanel","download","questionView","preQuiz","play","currentQuestion","sample","preQuestion","finishQuestion","join","time_per_question","count","question_points","points","postQuestion","current","showAnswer","show_answer","hasNext","bind","postQuiz","startTimer","counter","updateTimer","remaining","timer","setInterval","formatSeconds","seconds","minutes","s","clearTimer","clearInterval","throttle","unloadedFiles","files","clone","question_files","mapObject","val","loadedCount","countBy","neededType","findKey","type","loaded","navigator","onLine","neededCount","file","pop","ajax","dataType","url","done","toAdd","objects","add","any","ContinuousQuizView","values","flatten","unanswered","time_per_quiz","startTime","limit","maxPoints","bestPoints","rank","bestRank"],"mappings":"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","file":"packed.js","sourcesContent":["(function(root){\n  app = root.app || {};\n\n  app.QUESTION_TYPE = {\n    MULTI: 'multi',\n    SINGLE: 'single'\n  };\n\n  app.QUIZ_TYPE = {\n    ORDINARY: 'ordinary',\n    TIME_LIMIT: 'time_limit',\n    CHALLENGE: 'challenge'\n  };\n\n  app.DOWNLOAD_TIMEOUT = 3000;\n  app.DOWNLOAD_TRIGGER = 30; // download more if questions are less than this value, only for time limit and challenge mode\n\n  root.app = app;\n  return app;\n})(window);\n","(function(root, $, _, Backbone) {\n  app = root.app || {};\n\n  app.ApplicationView = Backbone.View.extend({\n    el: $('#app_container'),\n    dataRoot: '/data/',\n    apiRoot: '/rest/',\n    initialize: function(options) {\n      this.game_code = options.game_code;\n      this.gameDataRoot = this.dataRoot + this.game_code + '/';\n      this.quizConfig = options.config;\n    },\n    run: function() {\n      var errorView;\n      var used = parseInt(localStorage.getItem(this.game_code + '_count')) || 0,\n        max = parseInt(this.quizConfig.max_chances);\n      if (used > max) {\n        errorView = new app.RejectionNoMoreChanceView();\n      } else {\n        var now = new Date(),\n          start_at = new Date(this.quizConfig.start_at),\n          end_at = new Date(this.quizConfig.end_at);\n        if (now < start_at) {\n          errorView = new app.RejectionTooEarlyView();\n        } else if (now > end_at) {\n          errorView = new app.RejectionTooLateView();\n        }\n      };\n      if (errorView) {\n        this.loadView(errorView);\n      } else {\n        this.prepareQuiz();\n      }\n    },\n    loadView: function(view) {\n      this.view && (this.view.close ? this.view.close() : this.view.remove());\n      this.view = view;\n      this.$el.append(this.view.render().el);\n    },\n    loadStyle: function(){\n      var style, quizType = this.quizConfig['type'];\n      switch (quizType) {\n        case app.QUIZ_TYPE.ORDINARY:\n          style = 'theme1/css/main.css';\n          break;\n        case app.QUIZ_TYPE.TIME_LIMIT:\n          style = 'theme2/css/main.css';\n          break;\n        case app.QUIZ_TYPE.CHALLENGE:\n          style = 'theme3/css/main.css';\n          break;\n        default:\n          throw new Error('Unknown Quiz Type');\n      }\n      console.log('style', style);\n      $('head').append('<link rel=\"stylesheet\" type=\"text/css\" href=\"' + style + '\"/>');\n    },\n    prepareQuiz: function() {\n      var view = new app.WelcomeView({\n        content: this.quizConfig.welcome,\n        infoFields: this.quizConfig.info_fields,\n        quizId: this.quizConfig.id\n      });\n      this.listenToOnce(view, 'startQuiz', this.startQuiz);\n      this.loadView(view);\n    },\n    startQuiz: function(args) {\n      // console.log(_.object(args));\n      //Todo: send args to server\n\n      var ViewClass, quizType = this.quizConfig['type'];\n      var style = '';\n      switch (quizType) {\n        case app.QUIZ_TYPE.ORDINARY:\n          ViewClass = app.OrdinaryQuizView;\n          break;\n        case app.QUIZ_TYPE.TIME_LIMIT:\n          ViewClass = app.TimeLimitQuizView;\n          break;\n        case app.QUIZ_TYPE.CHALLENGE:\n          ViewClass = app.ChallengeQuizView;\n          break;\n        default:\n          throw new Error('Unknown Quiz Type');\n      }\n      var view = new ViewClass({\n        config: this.quizConfig,\n        gameDataRoot: this.gameDataRoot\n      });\n      var used = parseInt(localStorage.getItem(this.game_code + '_count')) || 0;\n      localStorage.setItem(this.game_code + '_count', used + 1);\n      this.listenToOnce(view, 'finishQuiz', this.finishQuiz);\n      this.loadView(view);\n    },\n    finishQuiz: function() {\n      console.log(\"结束\");\n      //Todo: send data to server\n      var view = new app.RankView();\n      this.loadView(view);\n    }\n  });\n\n  root.app = app;\n  return app;\n})(this, $, _, Backbone);\n","(function(root, $, _, Backbone){\n  app = root.app || {};\n\n  app.ModalView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'modal',\n    template: _.template($('#tpl_modal').html()),\n    events: {\n      'click .submit': 'close'\n    },\n    initialize: function(options){\n      this.options = options;\n      this.callback = options.callback;\n    },\n    render: function(){\n      this.$el.html(this.template(this.options));\n      return this;\n    },\n    close: function(){\n      _.isFunction(this.callback) && this.callback();\n      this.remove();\n    }\n  });\n\n  app.modal = function(options){\n    var view = new app.ModalView(options);\n    $('body').append(view.render().el);\n  };\n\n  root.app = app;\n  return app;\n})(window, $, _, Backbone);\n","(function(root, Backbone){\n  app = root.app || {};\n\n  app.Option = Backbone.Model.extend({});\n\n  app.Question = Backbone.Model.extend({\n    defaults: {\n      \"selected\": [],\n      \"timeout\":  false,\n      \"answered\": false\n    },\n    isCorrect: function(){\n      if (!this.get('answered')) return false;\n      var answer = this.get('answer');\n      var selected = _(this.get('selected')).pluck('id');\n      if(answer && selected && answer.length === selected.length){\n        return _.difference(answer, selected).length === 0;\n      }\n      return false;\n    },\n    getAnswerCodes: function(){\n      var answer = this.get('answer'),\n          options = this.get('options');\n      return _.map(answer, function(id){\n        return options.get(id).get('code');\n      });\n    }\n  });\n\n  app.OptionCollection = Backbone.Collection.extend({model: app.Option});\n\n  app.QuestionCollection = Backbone.Collection.extend({\n    model: app.Question,\n    totalPoints: function(questionPoints){\n      var totalPoints = 0;\n      this.each(function(model){\n        if (model.get('answered') && model.isCorrect()){\n          totalPoints += questionPoints[model.get('type')];\n        }\n      }, this);\n      return totalPoints;\n    }\n  });\n\n  root.app = app;\n  return app;\n})(window, Backbone);\n","(function(root, _, Backbone){\n  app = root.app || {};\n\n  app.RejectionView = Backbone.View.extend({\n    render: function(){\n      this.$el.html(this.template());\n      return this;\n    }\n  });\n\n  app.RejectionTooEarlyView = app.RejectionView.extend({\n    template: _.template($('#tpl_too_early').html())\n  });\n\n  app.RejectionTooLateView = app.RejectionView.extend({\n    template: _.template($('#tpl_too_late').html())\n  });\n\n  app.RejectionNoMoreChanceView = app.RejectionView.extend({\n    template: _.template($('#tpl_no_more_chance').html())\n  });\n\n  app.WelcomeView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'welcome',\n    template: _.template($('#tpl_welcome').html()),\n    events: {\n      'click .submit': 'onSubmit',\n    },\n    initialize: function(options){\n      this.content = options.content;\n      this.infoFields = options.infoFields;\n      this.quizId = options.quizId;\n    },\n    render: function(){\n      this.$el.html(this.template({\n        content: this.content,\n        infoFields: this.infoFields\n      }));\n      return this;\n    },\n    onSubmit: function(e){\n      var field_keys = _.unzip(this.infoFields)[0];\n      var validated = false;\n      var field_data = [];\n      if (field_keys.length){\n        validated = _(this.$('input')).chain()\n        .filter(function(input){\n          return _(field_keys).indexOf(input.name) >= 0;\n        }).every(function(input){\n          if (input.value.length > 0){\n            field_data.push([input.name, input.value])\n            localStorage.setItem(input.name, input.value);\n            return true;\n          }\n          return false;\n        }).value();\n      } else {\n        validated = true;\n      }\n      if(validated){\n        this.trigger('startQuiz', field_data);\n      } else {\n        app.modal({\n          message: \"亲，需填完信息才能开始哦~\",\n          emotion: \"tricky\",\n          button: { text: \"关闭\" }\n        });\n      }\n    }\n  });\n\n  root.app = app;\n  return app;\n})(this, _, Backbone);\n","(function(root, _, Backbone){\n  app = root.app || {};\n\n  app.QuestionView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'question',\n    template: _.template($('#tpl_question').html()),\n    events: {\n      'click .submit': 'onSubmit'\n    },\n    initialize: function(options){\n      // set code(A,B,C...) for each options and build a collection\n      var optionData = this.model.get('options');\n      var questionOptions =  new app.OptionCollection(optionData);\n      questionOptions.each(function(model, index){\n        model.set('code' , String.fromCharCode(65 + index));\n      });\n      this.model.set('options', questionOptions);\n      this.listenTo(questionOptions, 'change:checked', this.toggleChecked);\n      this.on('timeout', this.onTimeout, this);\n      this.optionViews = [];\n    },\n    render: function(){\n      var data = this.model.toJSON();\n      this.$el.html(this.template(data));\n      this.renderAllOptions();\n      return this;\n    },\n    renderOption: function(model){\n      if(this.model.get('type') == app.QUESTION_TYPE.MULTI){\n        var ViewClass = app.MultiSelectionView\n      } else {\n        var ViewClass = app.SingleSelectionView\n      }\n      var view = new ViewClass({model:model});\n      this.optionViews.push(view);\n      this.$('.option_list').append(view.render().el);\n    },\n    renderAllOptions: function(){\n      var questionOptions = _.shuffle(this.model.get('options').models);\n      _.each(questionOptions, this.renderOption, this);\n      return this;\n    },\n    toggleChecked: function(checked){\n      if(this.model.get('type') == app.QUESTION_TYPE.MULTI){\n        this.model.set('selected', this.model.get('options').filter('checked'))\n      } else {\n        this.model.set('selected', [ checked ])\n      }\n    },\n    onSubmit: function(){\n      if (_.isEmpty(this.model.get('selected'))) return false;\n      this.finish();\n    },\n    onTimeout: function(){\n      this.model.set('timeout', true);\n      this.finish();\n    },\n    finish: function(){\n      this.model.set('answered', true);\n      this.trigger('finish', this.model);\n    },\n    close: function(){\n      _.each(this.optionViews, function(view){ view.remove(); });\n      this.remove();\n    }\n  });\n\n  app.OptionView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'question_option',\n    events: {\n      'change input': 'toggle'\n    },\n    render: function(){\n      this.$el.html(this.template(this.model.toJSON()));\n      return this;\n    },\n    toggle: function(){\n      var checked = this.model.get('checked');\n      this.model.set('checked', !checked);\n    },\n  });\n\n  app.SingleSelectionView = app.OptionView.extend({\n    template: _.template($('#tpl_option_single').html())\n  });\n\n  app.MultiSelectionView = app.OptionView.extend({\n    template: _.template($('#tpl_option_multi').html())\n  });\n\n  root.app = app;\n  return app;\n})(this, _, Backbone);\n","(function(root, $, _, Backbone){\n\n  app = root.app || {};\n\n  app.QuizBaseView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'quiz',\n    template: _.template($('#tpl_quiz').html()),\n    initialize: function(options){\n      this.config = options.config;\n      this.gameDataRoot = options.gameDataRoot;\n      this.questions = new app.QuestionCollection();\n    },\n    render: function(){\n      this.$el.html(this.template({timeLimit: this.timeLimit}));\n      // Once get a question start the quiz\n      this.listenToOnce(this.questions, 'add', this.start);\n      this.listenTo(this.questions, 'change:answered', this.updatePanel);\n      this.download();\n      return this;\n    },\n    close: function(){\n      this.questionView && this.questionView.close();\n      this.remove();\n    },\n    download: function(){\n      throw new Error('Not implemented');\n    },\n    start: function(){\n      this.preQuiz && this.preQuiz();\n      this.play();\n    },\n    play: function(){\n      this.currentQuestion = _.sample(this.questions.filter({'answered': false}));\n      this.preQuestion && this.preQuestion();\n      this.questionView && this.questionView.remove();\n      this.questionView = new app.QuestionView({model: this.currentQuestion});\n      this.listenToOnce(this.questionView, 'finish', this.finishQuestion);\n      this.$el.append(this.questionView.render().el);\n      console.log(this.currentQuestion.getAnswerCodes().join());\n    },\n    timeLimit: function(){\n      return this.config.time_per_question || null;\n    },\n    updatePanel: function(){\n      var count = this.questions.filter({'answered': true}).length,\n          questionPoints = this.config.question_points;\n      var points = this.questions.totalPoints(questionPoints);\n      this.$('#count').html(count);\n      this.$('#points').html(points);\n      console.log('update panel', count, points);\n    },\n    finishQuestion: function(){\n      //Todo: ajax to server\n      this.postQuestion && this.postQuestion();\n      var current = this.currentQuestion,\n          showAnswer = (this.config.show_answer || false),\n          timeout = current.get('timeout'),\n          message = current.isCorrect() ? '亲，答题正确，好厉害哦~' : (\n             timeout ? '亲，回答超时，注意答题时间哦~' : '亲，答题错误。'\n          ),\n          emotion = timeout ? 'sweat' : (\n            current.isCorrect() ? 'tongue' : 'tears'\n          );\n      showAnswer && (message += \"正确答案:\" + current.getAnswerCodes().join() + '。');\n      if(this.hasNext()){\n        app.modal({\n          message: message,\n          button: { text: \"下一题\" },\n          emotion: emotion,\n          callback: _.bind(this.play, this)\n        });\n      } else {\n        this.postQuiz && this.postQuiz();\n        app.modal({\n          message: message + \"游戏结束\",\n          button: { text: \"查看结果\" },\n          emotion: emotion,\n          callback: _.bind(function(){\n            this.trigger('finishQuiz');\n          }, this)\n        });\n      }\n    },\n    startTimer: function(){\n      var counter = 0,\n          timeLimit = this.timeLimit();\n      this.updateTimer(timeLimit);\n      var callback = function(){\n        remaining = timeLimit - ++counter;\n        this.updateTimer(remaining);\n        if (remaining < 1) this.timeout();\n      };\n      this.timer = setInterval(_.bind(callback, this), 1000);\n    },\n    updateTimer: function(remaining){\n      function formatSeconds(seconds){\n        var minutes = parseInt(seconds / 60);\n        var seconds = seconds % 60;\n        return _.map([minutes, seconds], function(s){\n          if (s > 9) return '' + s;\n          return '0' + s;\n        }).join(':');\n      }\n      this.$('#timer').html( formatSeconds(remaining) );\n    },\n    timeout: function(){\n      this.clearTimer();\n      this.questionView.trigger('timeout');\n    },\n    clearTimer: function(){\n      this.timer && clearInterval(this.timer);\n      this.timer = null;\n    },\n    hasNext: function(){\n      throw new Error('Not implemented');\n    }\n  });\n\n  app.OrdinaryQuizView = app.QuizBaseView.extend({\n    preQuestion: function(){\n      if(this.timeLimit()) this.startTimer();\n    },\n    postQuestion: function(){\n      this.clearTimer();\n    },\n    download: _.throttle(function(){\n      // save the unloaded files\n      if(!this.unloadedFiles){\n        var files = _.clone(this.config.question_files);\n        this.unloadedFiles = _.mapObject(files, function(val){\n          return _.shuffle(val);\n        })\n      }\n      var loadedCount = this.questions.countBy('type');\n      var neededType = _.findKey(this.config.count, function(count, type){\n        var loaded = loadedCount[type] || 0;\n        // console.log('type:' + type +' loaded:'+loaded+' need:'+count);\n        return loaded < count;\n      });\n      if (!neededType) return this.questions;\n      // download files only when internet is accessable\n      if (navigator.onLine) {\n        var neededCount = this.config.count[neededType] - (loadedCount[neededType] || 0);\n        var file = this.unloadedFiles[neededType].pop();\n        $.ajax({\n          dataType: \"json\",\n          url: this.gameDataRoot + file,\n          timeout: app.DOWNLOAD_TIMEOUT\n        }).done(_.bind(function(data){\n          var toAdd = _.sample(data.objects, neededCount);\n          this.questions.add(toAdd);\n        }, this));\n      }\n      // download more\n      this.download();\n    }, app.DOWNLOAD_TIMEOUT),\n    hasNext: function(){\n      return this.questions.any({'answered': false});\n    }\n  });\n\n  // for those modes which need to download questions continuously\n  app.ContinuousQuizView = app.QuizBaseView.extend({\n    download: _.throttle(function(){\n      if(_.isEmpty(this.unloadedFiles)){\n        var files = _.clone(this.config.question_files);\n        this.unloadedFiles = _(files).chain().values().flatten().shuffle().value();\n      }\n      if (navigator.onLine) {\n        var file = this.unloadedFiles.pop();\n        $.ajax({\n          dataType: \"json\",\n          url: this.gameDataRoot + file,\n          timeout: app.DOWNLOAD_TIMEOUT\n        }).done(_.bind(function(data){\n          this.questions.add(data.objects);\n        }, this));\n      }\n    }, app.DOWNLOAD_TIMEOUT),\n    postQuestion: function(){\n      var unanswered = this.questions.filter({'answered': false});\n      if(unanswered.length < app.DOWNLOAD_TRIGGER) this.download();\n    },\n  });\n\n  app.TimeLimitQuizView = app.ContinuousQuizView.extend({\n    timeLimit: function(){\n      return this.config.time_per_quiz || 300;\n    },\n    preQuiz: function(){\n      if(this.timeLimit()) this.startTimer();\n      this.startTime = new Date();\n    },\n    postQuiz: function(){\n      this.clearTimer();\n    },\n    hasNext: function(){\n      var limit = this.timeLimit();\n          current = new Date();\n      console.log('time limit', limit, (current - this.startTime)/1000);\n      return current - this.startTime < limit * 1000;\n    }\n  });\n\n  app.ChallengeQuizView = app.ContinuousQuizView.extend({\n    timeLimit: function(){\n      return null;\n    },\n    hasNext: function(){\n      return this.currentQuestion.isCorrect();\n    }\n  });\n\n  root.app = app;\n  return app;\n})(this, $, _, Backbone);\n","(function(root, _, Backbone){\n  app = root.app || {};\n\n  app.RankView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'rank',\n    template: _.template($('#tpl_rank').html()),\n    render: function(){\n      this.$el.html(this.template({\n        points:0,\n        maxPoints:0,\n        bestPoints:100,\n        rank:2,\n        bestRank:1\n      }));\n      return this;\n    }\n  });\n\n  root.app = app;\n  return app;\n})(this, _, Backbone);\n"],"sourceRoot":"/source/"}