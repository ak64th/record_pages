{"version":3,"sources":["constants.js","main.js","modal_view.js","models.js","pre_quiz_views.js","question_views.js","quiz_views.js","rank_view.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChfile":"packed.js","sourcesContent":["(function(root){\n  app = root.app || {};\n\n  app.QUESTION_TYPE = {\n    MULTI: 'multi',\n    SINGLE: 'single'\n  };\n\n  app.QUIZ_TYPE = {\n    ORDINARY: 'ordinary',\n    TIME_LIMIT: 'time_limit',\n    CHALLENGE: 'challenge'\n  };\n\n  app.DOWNLOAD_TIMEOUT = 3000;\n  app.DOWNLOAD_TRIGGER = 30; // download more if questions are less than this value, only for time limit and challenge mode\n\n  root.app = app;\n  return app;\n})(window);\n","(function(root, $, _, Backbone) {\n  app = root.app || {};\n\n  app.ApplicationView = Backbone.View.extend({\n    el: $('#app_container'),\n    dataRoot: '/data/',\n    apiRoot: '/api/',\n    initialize: function(options) {\n      this.game_code = options.game_code;\n      this.gameDataRoot = this.dataRoot + this.game_code + '/';\n      this.quizConfig = options.config;\n    },\n    run: function() {\n      var errorView;\n      var used = parseInt(localStorage.getItem(this.game_code + '_count')) || 0,\n        max = parseInt(this.quizConfig.max_chances);\n      if (used > max) {\n        errorView = new app.RejectionNoMoreChanceView();\n      } else {\n        var now = new Date(),\n          start_at = new Date(this.quizConfig.start_at),\n          end_at = new Date(this.quizConfig.end_at);\n        if (now < start_at) {\n          errorView = new app.RejectionTooEarlyView();\n        } else if (now > end_at) {\n          errorView = new app.RejectionTooLateView();\n        }\n      };\n      if (errorView) {\n        this.loadView(errorView);\n      } else {\n        this.prepareQuiz();\n      }\n    },\n    rerun: function(){\n      delete this.run_id;\n      delete this.uid;\n      this.run();\n    },\n    loadView: function(view) {\n      this.view && (this.view.close ? this.view.close() : this.view.remove());\n      this.view = view;\n      this.$el.append(this.view.render().el);\n    },\n    loadStyle: function(){\n      var style, quizType = this.quizConfig['type'];\n      switch (quizType) {\n        case app.QUIZ_TYPE.ORDINARY:\n          style = 'theme1/css/main.css';\n          break;\n        case app.QUIZ_TYPE.TIME_LIMIT:\n          style = 'theme2/css/main.css';\n          break;\n        case app.QUIZ_TYPE.CHALLENGE:\n          style = 'theme3/css/main.css';\n          break;\n        default:\n          throw new Error('Unknown Quiz Type');\n      }\n      $('head').append('<link rel=\"stylesheet\" type=\"text/css\" href=\"' + style + '\"/>');\n    },\n    prepareQuiz: function() {\n      var view = new app.WelcomeView({\n        content: this.quizConfig.welcome,\n        infoFields: this.quizConfig.info_fields,\n        quizId: this.quizConfig.id\n      });\n      this.listenToOnce(view, 'startQuiz', this.gatherUserInfo);\n      this.loadView(view);\n    },\n    gatherUserInfo: function(args){\n      var params = {}, storageKey;\n      if(_.size(args) > 0){\n        var userinfo = JSON.stringify(_.object(args));\n        var hash = mmh3(userinfo);\n        var storageKey = this.game_code + '_uid_' + hash;\n        var uid = localStorage.getItem(storageKey);\n        if ( !uid ){\n          params['hash'] = hash;\n          params['userinfo'] = userinfo;\n        } else {\n          params['uid'] = uid;\n        }\n      }\n      $.ajax({\n        url: this.apiRoot + 'start/' + this.quizConfig.id,\n        data: params,\n        method: 'POST'\n      }).done(_.bind(function(data){\n        this.run_id = data['run_id'];\n        if(!!storageKey){\n          this.uid = data['uid'];\n          localStorage.setItem(storageKey, data['uid']);\n        }\n        this.startQuiz();\n      }, this));\n    },\n    startQuiz: function() {\n      console.log(this.uid, this.run_id);\n      var ViewClass, quizType = this.quizConfig['type'];\n      var style = '';\n      switch (quizType) {\n        case app.QUIZ_TYPE.ORDINARY:\n          ViewClass = app.OrdinaryQuizView;\n          break;\n        case app.QUIZ_TYPE.TIME_LIMIT:\n          ViewClass = app.TimeLimitQuizView;\n          break;\n        case app.QUIZ_TYPE.CHALLENGE:\n          ViewClass = app.ChallengeQuizView;\n          break;\n        default:\n          throw new Error('Unknown Quiz Type');\n      }\n      var view = new ViewClass({\n        config: this.quizConfig,\n        gameDataRoot: this.gameDataRoot\n      });\n      var used = parseInt(localStorage.getItem(this.game_code + '_count')) || 0;\n      localStorage.setItem(this.game_code + '_count', used + 1);\n      this.listenToOnce(view, 'finishQuiz', this.finishQuiz);\n      this.loadView(view);\n    },\n    finishQuiz: function(points) {\n      console.log(\"结束，得到\" + points + '分');\n      var result = {'points': points};\n      var data =  { 'score': points,'run_id': this.uid };\n      if (!!this.uid) data['uid'] = this.uid\n      $.ajax({\n        url: this.apiRoot + 'end/' + this.quizConfig.id,\n        data: data,\n        method: 'POST'\n      }).done(_.bind(function(data){\n        console.log(data);\n        result['rank'] = data['rank'];\n        result['bestPoints'] = data['best_score'];\n        result['bestRank'] = data['best_rank'];\n        var view = new app.RankView({'result': result});\n        this.listenToOnce(view, 'rerun', this.rerun);\n        this.loadView(view);\n      }, this));\n    }\n  });\n\n  // mumurhash3 function from github.com/garycourt/murmurhash-js\n  function mmh3(key, seed) {\n    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i;\n    remainder = key.length & 3; // key.length % 4\n    bytes = key.length - remainder;\n    h1 = seed;\n    c1 = 0xcc9e2d51;\n    c2 = 0x1b873593;\n    i = 0;\n    while (i < bytes) {\n      k1 =\n        ((key.charCodeAt(i) & 0xff)) |\n        ((key.charCodeAt(++i) & 0xff) << 8) |\n        ((key.charCodeAt(++i) & 0xff) << 16) |\n        ((key.charCodeAt(++i) & 0xff) << 24);\n      ++i;\n      k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n      k1 = (k1 << 15) | (k1 >>> 17);\n      k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n      h1 ^= k1;\n      h1 = (h1 << 13) | (h1 >>> 19);\n      h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n      h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n    k1 = 0;\n    switch (remainder) {\n      case 3:\n        k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n      case 2:\n        k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n      case 1:\n        k1 ^= (key.charCodeAt(i) & 0xff);\n        k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n        h1 ^= k1;\n    }\n    h1 ^= key.length;\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n    return h1 >>> 0;\n  }\n\n  root.app = app;\n  return app;\n})(this, $, _, Backbone);\n","(function(root, $, _, Backbone){\n  app = root.app || {};\n\n  app.ModalView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'modal',\n    template: _.template($('#tpl_modal').html()),\n    events: {\n      'click .submit': 'close'\n    },\n    initialize: function(options){\n      this.options = options;\n      this.callback = options.callback;\n    },\n    render: function(){\n      this.$el.html(this.template(this.options));\n      return this;\n    },\n    close: function(){\n      _.isFunction(this.callback) && this.callback();\n      this.remove();\n    }\n  });\n\n  app.modal = function(options){\n    var view = new app.ModalView(options);\n    $('body').append(view.render().el);\n  };\n\n  root.app = app;\n  return app;\n})(window, $, _, Backbone);\n","(function(root, Backbone){\n  app = root.app || {};\n\n  app.Option = Backbone.Model.extend({});\n\n  app.Question = Backbone.Model.extend({\n    defaults: {\n      \"selected\": [],\n      \"timeout\":  false,\n      \"answered\": false\n    },\n    isCorrect: function(){\n      if (!this.get('answered')) return false;\n      var answer = this.get('answer');\n      var selected = _(this.get('selected')).pluck('id');\n      if(answer && selected && answer.length === selected.length){\n        return _.difference(answer, selected).length === 0;\n      }\n      return false;\n    },\n    getAnswerCodes: function(){\n      var answer = this.get('answer'),\n          options = this.get('options');\n      return _.map(answer, function(id){\n        return options.get(id).get('code');\n      });\n    }\n  });\n\n  app.OptionCollection = Backbone.Collection.extend({model: app.Option});\n\n  app.QuestionCollection = Backbone.Collection.extend({\n    model: app.Question,\n    totalPoints: function(questionPoints){\n      var totalPoints = 0;\n      this.each(function(model){\n        if (model.get('answered') && model.isCorrect()){\n          totalPoints += questionPoints[model.get('type')];\n        }\n      }, this);\n      return totalPoints;\n    }\n  });\n\n  root.app = app;\n  return app;\n})(window, Backbone);\n","(function(root, _, Backbone){\n  app = root.app || {};\n\n  app.RejectionView = Backbone.View.extend({\n    render: function(){\n      this.$el.html(this.template());\n      return this;\n    }\n  });\n\n  app.RejectionTooEarlyView = app.RejectionView.extend({\n    template: _.template($('#tpl_too_early').html())\n  });\n\n  app.RejectionTooLateView = app.RejectionView.extend({\n    template: _.template($('#tpl_too_late').html())\n  });\n\n  app.RejectionNoMoreChanceView = app.RejectionView.extend({\n    template: _.template($('#tpl_no_more_chance').html())\n  });\n\n  app.WelcomeView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'welcome',\n    template: _.template($('#tpl_welcome').html()),\n    events: {\n      'click .submit': 'onSubmit',\n    },\n    initialize: function(options){\n      this.content = options.content;\n      this.infoFields = options.infoFields;\n      this.quizId = options.quizId;\n    },\n    render: function(){\n      this.$el.html(this.template({\n        content: this.content,\n        infoFields: this.infoFields\n      }));\n      return this;\n    },\n    onSubmit: function(e){\n      var field_keys = _.unzip(this.infoFields)[0];\n      var validated = false;\n      var field_data = [];\n      if (field_keys.length){\n        validated = _(this.$('input')).chain()\n        .filter(function(input){\n          return _(field_keys).indexOf(input.name) >= 0;\n        }).every(function(input){\n          if (input.value.length > 0){\n            field_data.push([input.name, input.value])\n            localStorage.setItem(input.name, input.value);\n            return true;\n          }\n          return false;\n        }).value();\n      } else {\n        validated = true;\n      }\n      if(validated){\n        this.trigger('startQuiz', field_data);\n      } else {\n        app.modal({\n          message: \"亲，需填完信息才能开始哦~\",\n          emotion: \"tricky\",\n          button: { text: \"关闭\" }\n        });\n      }\n    }\n  });\n\n  root.app = app;\n  return app;\n})(this, _, Backbone);\n","(function(root, _, Backbone){\n  app = root.app || {};\n\n  app.QuestionView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'question',\n    template: _.template($('#tpl_question').html()),\n    events: {\n      'click .submit': 'onSubmit'\n    },\n    initialize: function(options){\n      // set code(A,B,C...) for each options and build a collection\n      var optionData = this.model.get('options');\n      var questionOptions =  new app.OptionCollection(optionData);\n      questionOptions.each(function(model, index){\n        model.set('code' , String.fromCharCode(65 + index));\n      });\n      this.model.set('options', questionOptions);\n      this.listenTo(questionOptions, 'change:checked', this.toggleChecked);\n      this.on('timeout', this.onTimeout, this);\n      this.optionViews = [];\n    },\n    render: function(){\n      var data = this.model.toJSON();\n      this.$el.html(this.template(data));\n      this.renderAllOptions();\n      return this;\n    },\n    renderOption: function(model){\n      if(this.model.get('type') == app.QUESTION_TYPE.MULTI){\n        var ViewClass = app.MultiSelectionView\n      } else {\n        var ViewClass = app.SingleSelectionView\n      }\n      var view = new ViewClass({model:model});\n      this.optionViews.push(view);\n      this.$('.option_list').append(view.render().el);\n    },\n    renderAllOptions: function(){\n      var questionOptions = _.shuffle(this.model.get('options').models);\n      _.each(questionOptions, this.renderOption, this);\n      return this;\n    },\n    toggleChecked: function(checked){\n      if(this.model.get('type') == app.QUESTION_TYPE.MULTI){\n        this.model.set('selected', this.model.get('options').filter('checked'))\n      } else {\n        this.model.set('selected', [ checked ])\n      }\n    },\n    onSubmit: function(){\n      if (_.isEmpty(this.model.get('selected'))) return false;\n      this.finish();\n    },\n    onTimeout: function(){\n      this.model.set('timeout', true);\n      this.finish();\n    },\n    finish: function(){\n      this.model.set('answered', true);\n      this.trigger('finish', this.model);\n    },\n    close: function(){\n      _.each(this.optionViews, function(view){ view.remove(); });\n      this.remove();\n    }\n  });\n\n  app.OptionView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'question_option',\n    events: {\n      'change input': 'toggle'\n    },\n    render: function(){\n      this.$el.html(this.template(this.model.toJSON()));\n      return this;\n    },\n    toggle: function(){\n      var checked = this.model.get('checked');\n      this.model.set('checked', !checked);\n    },\n  });\n\n  app.SingleSelectionView = app.OptionView.extend({\n    template: _.template($('#tpl_option_single').html())\n  });\n\n  app.MultiSelectionView = app.OptionView.extend({\n    template: _.template($('#tpl_option_multi').html())\n  });\n\n  root.app = app;\n  return app;\n})(this, _, Backbone);\n","(function(root, $, _, Backbone){\n\n  app = root.app || {};\n\n  app.QuizBaseView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'quiz',\n    template: _.template($('#tpl_quiz').html()),\n    initialize: function(options){\n      this.config = options.config;\n      this.gameDataRoot = options.gameDataRoot;\n      this.questions = new app.QuestionCollection();\n    },\n    render: function(){\n      this.$el.html(this.template({timeLimit: this.timeLimit}));\n      // Once get a question start the quiz\n      this.listenToOnce(this.questions, 'add', this.start);\n      this.listenTo(this.questions, 'change:answered', this.updatePanel);\n      this.download();\n      return this;\n    },\n    close: function(){\n      this.questionView && this.questionView.close();\n      this.remove();\n    },\n    download: function(){\n      throw new Error('Not implemented');\n    },\n    start: function(){\n      this.preQuiz && this.preQuiz();\n      this.play();\n    },\n    play: function(){\n      this.currentQuestion = _.sample(this.questions.filter({'answered': false}));\n      this.preQuestion && this.preQuestion();\n      this.questionView && this.questionView.remove();\n      this.questionView = new app.QuestionView({model: this.currentQuestion});\n      this.listenToOnce(this.questionView, 'finish', this.finishQuestion);\n      this.$el.append(this.questionView.render().el);\n      console.log(this.currentQuestion.getAnswerCodes().join());\n    },\n    timeLimit: function(){\n      return this.config.time_per_question || null;\n    },\n    updatePanel: function(){\n      var count = this.questions.filter({'answered': true}).length,\n          questionPoints = this.config.question_points;\n      var points = this.questions.totalPoints(questionPoints);\n      this.$('#count').html(count);\n      this.$('#points').html(points);\n      console.log('update panel', count, points);\n    },\n    finishQuestion: function(){\n      //Todo: ajax to server\n      this.postQuestion && this.postQuestion();\n      var current = this.currentQuestion,\n          showAnswer = (this.config.show_answer || false),\n          timeout = current.get('timeout'),\n          message = current.isCorrect() ? '亲，答题正确，好厉害哦~' : (\n            timeout ? '亲，回答超时，注意答题时间哦~' : '亲，答题错误。'\n          ),\n          emotion = timeout ? 'sweat' : (\n            current.isCorrect() ? 'tongue' : 'tears'\n          );\n      showAnswer && (message += \"正确答案:\" + current.getAnswerCodes().join() + '。');\n      if(this.hasNext()){\n        app.modal({\n          message: message,\n          button: { text: \"下一题\" },\n          emotion: emotion,\n          callback: _.bind(this.play, this)\n        });\n      } else {\n        this.postQuiz && this.postQuiz();\n        app.modal({\n          message: message + \"游戏结束\",\n          button: { text: \"查看结果\" },\n          emotion: emotion,\n          callback: _.bind(function(){\n            var points = this.questions.totalPoints(this.config.question_points);\n            this.trigger('finishQuiz', points);\n          }, this)\n        });\n      }\n    },\n    startTimer: function(){\n      var counter = 0,\n          timeLimit = this.timeLimit();\n      this.updateTimer(timeLimit);\n      var callback = function(){\n        remaining = timeLimit - ++counter;\n        this.updateTimer(remaining);\n        if (remaining < 1) this.timeout();\n      };\n      this.timer = setInterval(_.bind(callback, this), 1000);\n    },\n    updateTimer: function(remaining){\n      function formatSeconds(seconds){\n        var minutes = parseInt(seconds / 60);\n        var seconds = seconds % 60;\n        return _.map([minutes, seconds], function(s){\n          if (s > 9) return '' + s;\n          return '0' + s;\n        }).join(':');\n      }\n      this.$('#timer').html( formatSeconds(remaining) );\n    },\n    timeout: function(){\n      this.clearTimer();\n      this.questionView.trigger('timeout');\n    },\n    clearTimer: function(){\n      this.timer && clearInterval(this.timer);\n      this.timer = null;\n    },\n    hasNext: function(){\n      throw new Error('Not implemented');\n    }\n  });\n\n  app.OrdinaryQuizView = app.QuizBaseView.extend({\n    preQuestion: function(){\n      if(this.timeLimit()) this.startTimer();\n    },\n    postQuestion: function(){\n      this.clearTimer();\n    },\n    download: _.throttle(function(){\n      // save the unloaded files\n      if(!this.unloadedFiles){\n        var files = _.clone(this.config.question_files);\n        this.unloadedFiles = _.mapObject(files, function(val){\n          return _.shuffle(val);\n        })\n      }\n      var loadedCount = this.questions.countBy('type');\n      var neededType = _.findKey(this.config.count, function(count, type){\n        var loaded = loadedCount[type] || 0;\n        // console.log('type:' + type +' loaded:'+loaded+' need:'+count);\n        return loaded < count;\n      });\n      if (!neededType) return this.questions;\n      // download files only when internet is accessable\n      if (navigator.onLine) {\n        var neededCount = this.config.count[neededType] - (loadedCount[neededType] || 0);\n        var file = this.unloadedFiles[neededType].pop();\n        $.ajax({\n          dataType: \"json\",\n          url: this.gameDataRoot + file,\n          timeout: app.DOWNLOAD_TIMEOUT\n        }).done(_.bind(function(data){\n          var toAdd = _.sample(data.objects, neededCount);\n          this.questions.add(toAdd);\n        }, this));\n      }\n      // download more\n      this.download();\n    }, app.DOWNLOAD_TIMEOUT),\n    hasNext: function(){\n      return this.questions.any({'answered': false});\n    }\n  });\n\n  // for those modes which need to download questions continuously\n  app.ContinuousQuizView = app.QuizBaseView.extend({\n    download: _.throttle(function(){\n      if(_.isEmpty(this.unloadedFiles)){\n        var files = _.clone(this.config.question_files);\n        this.unloadedFiles = _(files).chain().values().flatten().shuffle().value();\n      }\n      if (navigator.onLine) {\n        var file = this.unloadedFiles.pop();\n        $.ajax({\n          dataType: \"json\",\n          url: this.gameDataRoot + file,\n          timeout: app.DOWNLOAD_TIMEOUT\n        }).done(_.bind(function(data){\n          this.questions.add(data.objects);\n        }, this));\n      }\n    }, app.DOWNLOAD_TIMEOUT),\n    postQuestion: function(){\n      var unanswered = this.questions.filter({'answered': false});\n      if(unanswered.length < app.DOWNLOAD_TRIGGER) this.download();\n    },\n  });\n\n  app.TimeLimitQuizView = app.ContinuousQuizView.extend({\n    timeLimit: function(){\n      return this.config.time_per_quiz || 300;\n    },\n    preQuiz: function(){\n      if(this.timeLimit()) this.startTimer();\n      this.startTime = new Date();\n    },\n    postQuiz: function(){\n      this.clearTimer();\n    },\n    hasNext: function(){\n      var limit = this.timeLimit();\n          current = new Date();\n      console.log('time limit', limit, (current - this.startTime)/1000);\n      return current - this.startTime < limit * 1000;\n    }\n  });\n\n  app.ChallengeQuizView = app.ContinuousQuizView.extend({\n    timeLimit: function(){\n      return null;\n    },\n    hasNext: function(){\n      return this.currentQuestion.isCorrect();\n    }\n  });\n\n  root.app = app;\n  return app;\n})(this, $, _, Backbone);\n","(function(root, _, Backbone){\n  app = root.app || {};\n\n  app.RankView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'rank',\n    template: _.template($('#tpl_rank').html()),\n    events: {'click .submit': 'onSubmit'},\n    initialize: function(options) {\n      console.log(options);\n      this.result = options.result;\n    },\n    render: function(){\n      this.$el.html(this.template(this.result));\n      return this;\n    },\n    onSubmit: function(){\n      this.trigger('rerun');\n    }\n  });\n\n  root.app = app;\n  return app;\n})(this, _, Backbone);\n"],"sourceRoot":"/source/"}